// packages/main/prisma/schema.prisma

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]  //  << neu
}

datasource db {
  provider = "sqlite"
  url      = "file:./sync_data.db"
  // Removed engineType and previewFeatures
}

// --- Your Models ---

model FileMappingState {
  id                  Int       @id @default(autoincrement())
  sourceAPath         String    @unique
  sourceBPath         String    @unique
  mappingCreatedAt    DateTime  @default(now())
  // --- REMOVE @db.Text ---
  artist              String?   @map("artist") // @db.Text removed
  title               String?   @map("title")  // @db.Text removed
  // -----------------------
  sourceALastModified DateTime?
  sourceBLastModified DateTime?
  lastSyncTimestamp   DateTime?

  syncStateTags SyncStateTag[]

  @@index([lastSyncTimestamp])
  @@index([artist])
  @@index([title])
}

model SyncStateTag {
  id                 Int     @id @default(autoincrement())
  fileMappingStateId Int
  // --- REMOVE @db.Text ---
  tagName            String  @map("tagName")    // @db.Text removed
  sourceAValue       String? @map("sourceAValue") // @db.Text removed
  sourceBValue       String? @map("sourceBValue") // @db.Text removed
  // -----------------------

  fileMappingState FileMappingState @relation(fields: [fileMappingStateId], references: [id], onDelete: Cascade)

  @@unique([fileMappingStateId, tagName])
  @@index([fileMappingStateId])
}

/// Track each Source A file for DJ-Library membership
model SourceFileState {
  id               Int      @id @default(autoincrement())
  path             String   @unique                    // full absolute path
  lastModifiedAt   DateTime?                           // file mtime on last scan
  inDjLibrary      Boolean  @default(false)            // TXXX/DJBIBLIOTHEK != "Nein"
  djLastChecked    DateTime @default(now())            // when we last read that tag

  @@index([inDjLibrary])
  @@index([lastModifiedAt])
}
